#root {
  margin: 0 auto;
}
.main {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--bg--color);
  color: var(--text--100);
  width: 60%;
  height: 80vh;
  margin: 2rem auto;
  padding: 2rem;
  border-radius: 20px;
  overflow: auto;
}
.app-body {
  display: flex;
  width: 100%;
  justify-content: space-between;
  padding-top: 2rem;
}
.note-body {
  width: 60%;
}
.note-item {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  border-radius: 20px;
  color: var(--bg--color);
  padding: 0.5rem;
  margin-bottom: 1rem;
  height: 100px;
}
.note-item__content {
  display: flex;
  justify-content: space-between;
}
.note-item__tools {
  display: flex;
  justify-content: space-between;
}
.note-item-1 {
  background-color: var(--note--1);
}
.note-item-2 {
  background-color: var(--note--2);
}
.note-item-4 {
  background-color: var(--note--4);
}
.note-item-completd {
  background-color: var(--note--completed);
}
.note-item-3 {
  background-color: var(--note--3);
}
.add-new-note {
  display: flex;
  flex-direction: column;
}
.note-form {
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  padding-top: 1rem;
}
.text-input {
  border: none;
  outline: none;
  border-radius: 10px;
  height: 35px;
  margin-bottom: 1rem;
  background-color: var(--dark--200);
  color: var(--text--100);
  padding: 0.5rem 0.7rem;
}

input::placeholder {
  color: var(--text--200);
}
.btn {
  border: none;
  background-color: transparent;
  outline: none;
  border-radius: 10px;
  color: var(--text--100);
  padding: 0.5rem 0;
  cursor: pointer;
}
.btn--primary {
  background-color: var(--red--primary);
}
.note-item__header {
  display: flex;
  justify-content: space-between;
}
.note-item__footer {
  font-size: 0.8rem;
  color: var(--text--300);
  text-align: center;
}
.actions {
  width: 20%;
  display: flex;
  justify-content: space-around;
}

.delete {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 32px;
  height: 30px;
  border-radius: 30%;
  background-color: var(--red--primary);
  font-size: 1.3rem;
  transition: 500ms;
  color: var(--note--4);
}
.delete:hover {
  font-size: 1rem;
}

.check-completed {
  width: 20px;
}
.completed {
  text-decoration: line-through;
}

@media screen and (max-width: 768px) {
  .app-body {
    display: flex;
    flex-direction: column;
  }
  .main {
    width: 90%;
  }
  .note-body {
    margin-top: 1rem;
    width: 100%;
  }
}

@layer properties {
  @property --icon-opacity {
    syntax: "<number>";
    inherits: true;
    initial-value: 0;
  }
  @property --icon-invert {
    syntax: "<number>";
    inherits: true;
    initial-value: 0;
  }
  @property --icon-size {
    syntax: "<number>";
    inherits: true;
    initial-value: 0;
  }
  @property --negative-shadow-offset {
    syntax: "<number>";
    inherits: true;
    initial-value: 0;
  }
  @property --text-opacity {
    syntax: "<number>";
    inherits: true;
    initial-value: 0;
  }
}

:root {
  /* -- Box */
  --checkbox-border-radius: 30%;
  --checkbox-width: 30;
  --checkbox-height: 30;

  --negative-shadow-offset: 500;
  --active-shadow-opacity: 0;

  /* -- icon */
  --icon-check: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='none' stroke='white' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' class='feather feather-check'%3E%3Cpath d='M20 6 9 17l-5-5'/%3E%3C/svg%3E");
  --icon-opacity: 0;
  --icon-size: 1;

  /* -- easing */
  --cubic-bezier: cubic-bezier(0.5, -1.2, 0.2, 2.2);
}

label[for*="checkbox"] {
  cursor: pointer;
  position: relative;
  display: flex;
  --icon-opacity: 0.5;
  --icon-size: 1;

  &:hover {
    &:after {
      --icon-opacity: 0.7;
      --icon-size: 0.8;
    }
  }

  /* label:after */
  &:after {
    content: "";
    display: block;
    position: absolute;
    width: calc(var(--checkbox-width) * 1px);
    height: calc(var(--checkbox-height) * 1px);
    top: 0;
    left: 0;
    background-repeat: no-repeat;
    background-position: center center;
    background-size: 60%;
    border-radius: var(--checkbox-border-radius);
    pointer-events: none;
    background-image: var(--icon-check);
    filter: invert(10%);
    opacity: var(--icon-opacity);
    transform: scale(var(--icon-size));

    /* here I couldn't animate --icon-invert */
    transition: opacity 0.3s ease, filter 0.3s ease,
      transform 0.3s var(--cubic-bezier);
  }

  &:has(input[type="checkbox"]:checked) {
    &:after {
      --icon-opacity: 1;
    }
  }

  /* label input[type="checkbox"] */
  & input[type="checkbox"] {
    appearance: none;
    cursor: pointer;
    margin: 0;
    background: var(--dark--200);
    width: calc(var(--checkbox-width) * 1px);
    height: calc(var(--checkbox-height) * 1px);
    border-radius: var(--checkbox-border-radius);
    box-shadow: inset 0 0 calc(calc(var(--checkbox-width) / 10) * 1px)
        rgba(0 0 0 / calc(var(--active-shadow-opacity))),
      inset 0 calc(calc(var(--checkbox-width) / 20) * 1px)
        calc(calc(var(--checkbox-width) / 30) * 1px)
        calc(calc(var(--checkbox-width) / var(--negative-shadow-offset)) * -1px)
        var(--checkbox-color-light),
      inset 0 calc(calc(var(--checkbox-width) / 20) * -1px)
        calc(calc(var(--checkbox-width) / 15) * 1px)
        calc(calc(var(--checkbox-width) / var(--negative-shadow-offset)) * -1px)
        var(--checkbox-color-dark);
    transition: --checkbox-color-hue 0.2s ease,
      --checkbox-color-saturation 0.2s ease,
      --checkbox-color-lightness 0.2s ease, --checkbox-color 0s ease,
      --negative-shadow-offset 0.2s ease;

    &:active,
    &:checked {
      background-color: #8e4ceb;
    }
  }
}
